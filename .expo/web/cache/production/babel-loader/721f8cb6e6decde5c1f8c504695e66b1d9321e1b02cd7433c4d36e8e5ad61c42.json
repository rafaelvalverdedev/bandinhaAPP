{"ast":null,"code":"'use client';import{ensureNativeModulesAreInstalled}from'./ensureNativeModulesAreInstalled';ensureNativeModulesAreInstalled();export const EventEmitter=globalThis.expo.EventEmitter;","map":{"version":3,"names":["ensureNativeModulesAreInstalled","EventEmitter","globalThis","expo"],"sources":["C:/Users/BOSCH/Projetos/bandinhaAPP/node_modules/expo-modules-core/src/EventEmitter.ts"],"sourcesContent":["'use client';\n\nimport { ensureNativeModulesAreInstalled } from './ensureNativeModulesAreInstalled';\nimport { EventsMap } from './ts-declarations/EventEmitter';\nimport type { ExpoGlobal } from './ts-declarations/global';\n\nensureNativeModulesAreInstalled();\n\n/**\n * A subscription object that allows to conveniently remove an event listener from the emitter.\n */\nexport interface EventSubscription {\n  /**\n   * Removes an event listener for which the subscription has been created.\n   * After calling this function, the listener will no longer receive any events from the emitter.\n   */\n  remove(): void;\n}\n\nexport type EventEmitter<TEventsMap extends EventsMap = Record<never, never>> =\n  typeof ExpoGlobal.EventEmitter<TEventsMap>;\nexport const EventEmitter: typeof ExpoGlobal.EventEmitter = globalThis.expo.EventEmitter;\n"],"mappings":"AAAA,YAAY,CAEZ,OAASA,+BAA+B,KAAQ,mCAAmC,CAInFA,+BAA+B,CAAC,CAAC,CAejC,MAAO,MAAM,CAAAC,YAA4C,CAAGC,UAAU,CAACC,IAAI,CAACF,YAAY","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}