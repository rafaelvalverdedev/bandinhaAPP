{"ast":null,"code":"import{transformsArrayToProps}from'../../lib/extract/extractTransform';export function parseTransformProp(transform,props){const transformArray=[];props&&transformArray.push(...stringifyTransformProps(props));if(Array.isArray(transform)){if(typeof transform[0]==='number'){transformArray.push(`matrix(${transform.join(' ')})`);}else{const stringifiedProps=transformsArrayToProps(transform);transformArray.push(...stringifyTransformProps(stringifiedProps));}}else if(typeof transform==='string'){transformArray.push(transform);}return transformArray.length?transformArray.join(' '):undefined;}export function stringifyTransformProps(transformProps){const transformArray=[];if(transformProps.translate!=null){transformArray.push(`translate(${transformProps.translate})`);}if(transformProps.translateX!=null||transformProps.translateY!=null){transformArray.push(`translate(${transformProps.translateX||0}, ${transformProps.translateY||0})`);}if(transformProps.scale!=null){transformArray.push(`scale(${transformProps.scale})`);}if(transformProps.scaleX!=null||transformProps.scaleY!=null){transformArray.push(`scale(${transformProps.scaleX||1}, ${transformProps.scaleY||1})`);}if(transformProps.rotation!=null){transformArray.push(`rotate(${transformProps.rotation})`);}if(transformProps.skewX!=null){transformArray.push(`skewX(${transformProps.skewX})`);}if(transformProps.skewY!=null){transformArray.push(`skewY(${transformProps.skewY})`);}return transformArray;}","map":{"version":3,"names":["transformsArrayToProps","parseTransformProp","transform","props","transformArray","push","stringifyTransformProps","Array","isArray","join","stringifiedProps","length","undefined","transformProps","translate","translateX","translateY","scale","scaleX","scaleY","rotation","skewX","skewY"],"sources":["C:\\Users\\BOSCH\\Projetos\\bandinhaAPP\\node_modules\\react-native-svg\\src\\web\\utils\\parseTransform.ts"],"sourcesContent":["import type { TransformProps } from '../../lib/extract/types';\nimport {\n  transformsArrayToProps,\n  TransformsStyleArray,\n} from '../../lib/extract/extractTransform';\nimport type { BaseProps } from '../types';\n\nexport function parseTransformProp(\n  transform: TransformProps['transform'],\n  props?: BaseProps\n) {\n  const transformArray: string[] = [];\n\n  props && transformArray.push(...stringifyTransformProps(props));\n\n  if (Array.isArray(transform)) {\n    if (typeof transform[0] === 'number') {\n      transformArray.push(`matrix(${transform.join(' ')})`);\n    } else {\n      const stringifiedProps = transformsArrayToProps(\n        // @ts-expect-error FIXME\n        transform as TransformsStyleArray\n      );\n      transformArray.push(...stringifyTransformProps(stringifiedProps));\n    }\n  } else if (typeof transform === 'string') {\n    transformArray.push(transform);\n  }\n\n  return transformArray.length ? transformArray.join(' ') : undefined;\n}\n\nexport function stringifyTransformProps(transformProps: TransformProps) {\n  const transformArray = [];\n  if (transformProps.translate != null) {\n    transformArray.push(`translate(${transformProps.translate})`);\n  }\n  if (transformProps.translateX != null || transformProps.translateY != null) {\n    transformArray.push(\n      `translate(${transformProps.translateX || 0}, ${\n        transformProps.translateY || 0\n      })`\n    );\n  }\n  if (transformProps.scale != null) {\n    transformArray.push(`scale(${transformProps.scale})`);\n  }\n  if (transformProps.scaleX != null || transformProps.scaleY != null) {\n    transformArray.push(\n      `scale(${transformProps.scaleX || 1}, ${transformProps.scaleY || 1})`\n    );\n  }\n  // rotation maps to rotate, not to collide with the text rotate attribute (which acts per glyph rather than block)\n  if (transformProps.rotation != null) {\n    transformArray.push(`rotate(${transformProps.rotation})`);\n  }\n  if (transformProps.skewX != null) {\n    transformArray.push(`skewX(${transformProps.skewX})`);\n  }\n  if (transformProps.skewY != null) {\n    transformArray.push(`skewY(${transformProps.skewY})`);\n  }\n  return transformArray;\n}\n"],"mappings":"AACA,OACEA,sBAAsB,KAEjB,oCAAoC,CAG3C,MAAO,SAAS,CAAAC,kBAAkBA,CAChCC,SAAsC,CACtCC,KAAiB,CACjB,CACA,KAAM,CAAAC,cAAwB,CAAG,EAAE,CAEnCD,KAAK,EAAIC,cAAc,CAACC,IAAI,CAAC,GAAGC,uBAAuB,CAACH,KAAK,CAAC,CAAC,CAE/D,GAAII,KAAK,CAACC,OAAO,CAACN,SAAS,CAAC,CAAE,CAC5B,GAAI,MAAO,CAAAA,SAAS,CAAC,CAAC,CAAC,GAAK,QAAQ,CAAE,CACpCE,cAAc,CAACC,IAAI,CAAC,UAAUH,SAAS,CAACO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CACvD,CAAC,IAAM,CACL,KAAM,CAAAC,gBAAgB,CAAGV,sBAAsB,CAE7CE,SACF,CAAC,CACDE,cAAc,CAACC,IAAI,CAAC,GAAGC,uBAAuB,CAACI,gBAAgB,CAAC,CAAC,CACnE,CACF,CAAC,IAAM,IAAI,MAAO,CAAAR,SAAS,GAAK,QAAQ,CAAE,CACxCE,cAAc,CAACC,IAAI,CAACH,SAAS,CAAC,CAChC,CAEA,MAAO,CAAAE,cAAc,CAACO,MAAM,CAAGP,cAAc,CAACK,IAAI,CAAC,GAAG,CAAC,CAAGG,SAAS,CACrE,CAEA,MAAO,SAAS,CAAAN,uBAAuBA,CAACO,cAA8B,CAAE,CACtE,KAAM,CAAAT,cAAc,CAAG,EAAE,CACzB,GAAIS,cAAc,CAACC,SAAS,EAAI,IAAI,CAAE,CACpCV,cAAc,CAACC,IAAI,CAAC,aAAaQ,cAAc,CAACC,SAAS,GAAG,CAAC,CAC/D,CACA,GAAID,cAAc,CAACE,UAAU,EAAI,IAAI,EAAIF,cAAc,CAACG,UAAU,EAAI,IAAI,CAAE,CAC1EZ,cAAc,CAACC,IAAI,CACjB,aAAaQ,cAAc,CAACE,UAAU,EAAI,CAAC,KACzCF,cAAc,CAACG,UAAU,EAAI,CAAC,GAElC,CAAC,CACH,CACA,GAAIH,cAAc,CAACI,KAAK,EAAI,IAAI,CAAE,CAChCb,cAAc,CAACC,IAAI,CAAC,SAASQ,cAAc,CAACI,KAAK,GAAG,CAAC,CACvD,CACA,GAAIJ,cAAc,CAACK,MAAM,EAAI,IAAI,EAAIL,cAAc,CAACM,MAAM,EAAI,IAAI,CAAE,CAClEf,cAAc,CAACC,IAAI,CACjB,SAASQ,cAAc,CAACK,MAAM,EAAI,CAAC,KAAKL,cAAc,CAACM,MAAM,EAAI,CAAC,GACpE,CAAC,CACH,CAEA,GAAIN,cAAc,CAACO,QAAQ,EAAI,IAAI,CAAE,CACnChB,cAAc,CAACC,IAAI,CAAC,UAAUQ,cAAc,CAACO,QAAQ,GAAG,CAAC,CAC3D,CACA,GAAIP,cAAc,CAACQ,KAAK,EAAI,IAAI,CAAE,CAChCjB,cAAc,CAACC,IAAI,CAAC,SAASQ,cAAc,CAACQ,KAAK,GAAG,CAAC,CACvD,CACA,GAAIR,cAAc,CAACS,KAAK,EAAI,IAAI,CAAE,CAChClB,cAAc,CAACC,IAAI,CAAC,SAASQ,cAAc,CAACS,KAAK,GAAG,CAAC,CACvD,CACA,MAAO,CAAAlB,cAAc,CACvB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}