{"ast":null,"code":"import{MetroServerError}from'./errors';import{fetchAsync}from'./fetchAsync';export function fetchThenEvalAsync(url){return fetchAsync(url).then(({body,status,headers})=>{if(headers?.has?.('Content-Type')!=null&&headers.get('Content-Type').includes('application/json')){throw new Error(JSON.parse(body).message||`Unknown error fetching '${url}'`);}if(status===200){return eval(body);}else{if(false){const error=jsonParseOptional(body);if(error){throw new MetroServerError(error,url);}}throw new Error(`Failed to load split bundle from URL: ${url}\\n${body}`);}});}function jsonParseOptional(json){try{return JSON.parse(json);}catch{return null;}}","map":{"version":3,"names":["MetroServerError","fetchAsync","fetchThenEvalAsync","url","then","body","status","headers","has","get","includes","Error","JSON","parse","message","eval","error","jsonParseOptional","json"],"sources":["C:/Users/BOSCH/Projetos/bandinhaAPP/node_modules/expo/src/async-require/fetchThenEvalJs.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { MetroServerError } from './errors';\nimport { fetchAsync } from './fetchAsync';\n/**\n * Load a bundle for a URL using fetch + eval on native and script tag injection on web.\n *\n * @param url Given a statement like `import('./Bacon')` `bundlePath` would be `Bacon`.\n */\nexport function fetchThenEvalAsync(url: string): Promise<void> {\n  return fetchAsync(url).then(({ body, status, headers }) => {\n    if (\n      headers?.has?.('Content-Type') != null &&\n      headers.get('Content-Type')!.includes('application/json')\n    ) {\n      // Errors are returned as JSON.\n      throw new Error(JSON.parse(body).message || `Unknown error fetching '${url}'`);\n    }\n\n    if (status === 200) {\n      // eslint-disable-next-line no-eval\n      return eval(body);\n    } else {\n      // Format Metro errors if possible.\n      if (process.env.NODE_ENV === 'development') {\n        // body can be an error from Metro if a module is missing.\n        // {\"originModulePath\":\"/Users/evanbacon/Documents/GitHub/expo/.\",\"targetModuleName\":\"./http://localhost:8081/node_modules/react-native/index.js\",\"message\":\"...\"}\n        const error = jsonParseOptional(body);\n        if (error) {\n          // TODO: This is essentially like the Metro native red box errors. We should do a better job formatting them so\n          // the user experience doesn't feel bad. This can be tested by loading a split bundle that results in a missing module error from Metro.\n          throw new MetroServerError(error, url);\n        }\n      }\n\n      throw new Error(`Failed to load split bundle from URL: ${url}\\n${body}`);\n    }\n  });\n}\n\nfunction jsonParseOptional(json: string): any {\n  try {\n    return JSON.parse(json);\n  } catch {\n    return null;\n  }\n}\n"],"mappings":"AAMA,OAASA,gBAAgB,KAAQ,UAAU,CAC3C,OAASC,UAAU,KAAQ,cAAc,CAMzC,MAAO,SAAS,CAAAC,kBAAkBA,CAACC,GAAW,CAAiB,CAC7D,MAAO,CAAAF,UAAU,CAACE,GAAG,CAAC,CAACC,IAAI,CAAC,CAAC,CAAEC,IAAI,CAAEC,MAAM,CAAEC,OAAQ,CAAC,GAAK,CACzD,GACEA,OAAO,EAAEC,GAAG,GAAG,cAAc,CAAC,EAAI,IAAI,EACtCD,OAAO,CAACE,GAAG,CAAC,cAAc,CAAC,CAAEC,QAAQ,CAAC,kBAAkB,CAAC,CACzD,CAEA,KAAM,IAAI,CAAAC,KAAK,CAACC,IAAI,CAACC,KAAK,CAACR,IAAI,CAAC,CAACS,OAAO,EAAI,2BAA2BX,GAAG,GAAG,CAAC,CAChF,CAEA,GAAIG,MAAM,GAAK,GAAG,CAAE,CAElB,MAAO,CAAAS,IAAI,CAACV,IAAI,CAAC,CACnB,CAAC,IAAM,CAEL,SAA4C,CAG1C,KAAM,CAAAW,KAAK,CAAGC,iBAAiB,CAACZ,IAAI,CAAC,CACrC,GAAIW,KAAK,CAAE,CAGT,KAAM,IAAI,CAAAhB,gBAAgB,CAACgB,KAAK,CAAEb,GAAG,CAAC,CACxC,CACF,CAEA,KAAM,IAAI,CAAAQ,KAAK,CAAC,yCAAyCR,GAAG,KAAKE,IAAI,EAAE,CAAC,CAC1E,CACF,CAAC,CAAC,CACJ,CAEA,QAAS,CAAAY,iBAAiBA,CAACC,IAAY,CAAO,CAC5C,GAAI,CACF,MAAO,CAAAN,IAAI,CAACC,KAAK,CAACK,IAAI,CAAC,CACzB,CAAE,KAAM,CACN,MAAO,KAAI,CACb,CACF","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}